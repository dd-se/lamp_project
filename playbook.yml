
- name: setup stack
  hosts: stack
  gather_facts: true
  become: true
  vars:
    app:
      src: ./app/
      dest: /opt/fastapi/
      owner: fastapi_user
      description: simple fastapi app using a mysql database
      app_port: "8000"
    mysql:
      bind_address: '0.0.0.0'
  tasks:
      - name: '[FRONTEND] install configure apache2'
        block:
          - name: install apache2
            ansible.builtin.apt:
              name: apache2
              state: present
              update_cache: yes
          - name: render and copy vhost config file for apache webserver
            ansible.builtin.template:
              src: apache_vhost.j2
              dest: /etc/apache2/sites-enabled/000-default.conf
              owner: root
              group: root
              mode: 0644
          - name: enable plugins for apache webserver
            ansible.builtin.command:
              cmd: | 
                a2enmod proxy proxy_ajp proxy_http rewrite deflate
                headers proxy_balancer proxy_connect proxy_html lbmethod_byrequests
          - name: restart service
            ansible.builtin.service:
              name: apache2
              state: restarted
        when: "'frontend' in group_names"

      - name: '[DB] Install configure mysql database'
        block:
          - name: 'install mysql'
            ansible.builtin.apt:
              name: 
                - mysql-server=8.0.30-0ubuntu0.22.04.1
                - python3-pymysql
              state: present
              update_cache: yes
          - name: 'ensure mysql is started'
            ansible.builtin.service:
              name: mysql
              state: started
              enabled: yes
          - name: create user
            community.mysql.mysql_user:
              login_unix_socket: /var/run/mysqld/mysqld.sock
              host: '%'
              name: "{{ secrets.username }}"
              password: "{{ secrets.password }}"
              priv: '{{ secrets.db }}.*:ALL,GRANT'
              state: present
          - name: create database
            community.mysql.mysql_db:
              name: "{{ secrets.db }}"
              state: present
              login_user: "{{ secrets.username }}"
              login_password: "{{ secrets.password }}"
          - name: Run several queries against the db
            community.mysql.mysql_query:
              login_user: "{{ secrets.username }}"
              login_password: "{{ secrets.password }}"
              login_db: "{{ secrets.db }}"
              query: "{{ secret_query }}"
              single_transaction: yes
            ignore_errors: yes
            no_log: true
          - name: 'Bind mysql to {{ mysql.bind_address }}'
            ansible.builtin.lineinfile:
              path: /etc/mysql/mysql.conf.d/mysqld.cnf
              regexp: '^bind-address'
              line: 'bind-address = {{ mysql.bind_address }}'
          - name: restart mysql
            ansible.builtin.service:
              name: mysql
              state: restarted
        when: "'db' in group_names"

      - name: '[BACKEND] Install configure backends'
        block:
        - name: 'create user'
          ansible.builtin.user:
            name: "{{ app.owner }}"
            comment: "app user"
            state: present
        - name: 'install python3 and pip'
          ansible.builtin.apt:
            name:
              - python3
              - python3-pip
            state: present
            update_cache: yes
        - name: 'copy app files to backends'
          ansible.posix.synchronize:
            dest: "{{ app.dest }}"
            src: "{{ app.src }}"
        - name: 'render and copy app enviroment variables to backend destinations'
          ansible.builtin.template:
            src: app_env.j2
            dest: "{{ app.dest }}.env"
        - name: 'install virtualenv'
          ansible.builtin.pip:
            name: virtualenv
            state: present
        - name: 'install specified python requirements in indicated (virtualenv)'
          ansible.builtin.pip:
            requirements: "{{ app.dest }}requirements.txt"
            virtualenv: "{{ app.dest }}.venv"
        - name: 'take ownership of backend files'
          ansible.builtin.file:
            dest: "{{ app.dest }}" 
            owner: "{{ app.owner }}"
            group: "{{ app.owner }}"
            mode: 0744
            recurse: yes
        - name: 'render and copy systemd service file for backends'
          ansible.builtin.template:
            src: systemd_gunicorn_app.j2
            dest: /etc/systemd/system/gunicorn.service
            owner: root
            group: root
            mode: 0644
        - name: ensure service is running
          ansible.builtin.service:
            name: gunicorn
            state: restarted
            enabled: yes
        when: "'backend' in group_names"

- name: modify base.html of one backend server
  hosts: backend[0]
  become: true
  gather_facts: no
  tasks:
    - ansible.builtin.replace:
        path: "/opt/fastapi/templates/base.html"
        regexp: 'bg-dark'
        replace: 'bg-secondary'