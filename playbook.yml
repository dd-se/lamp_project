
- name: setup stack
  hosts: stack
  gather_facts: true
  become: true
  vars:
    app:
      src: ./app/
      dest: /opt/fastapi/
      owner: fastapi_user
      description: simple fastapi app using a mysql database
      app_port: "8000"
  tasks:
      - name: '[FRONTEND] install configure apache2'
        block:
          - name: install apache2
            ansible.builtin.apt:
              name: apache2
              state: present
              update_cache: yes
          - name: render and copy vhost config file for apache webserver
            ansible.builtin.template:
              src: apache_vhost.j2
              dest: /etc/apache2/sites-enabled/000-default.conf
              owner: root
              group: root
              mode: 0644
          - name: enable plugins for apache webserver
            ansible.builtin.command:
              cmd: | 
                a2enmod proxy proxy_ajp proxy_http rewrite deflate
                headers proxy_balancer proxy_connect proxy_html lbmethod_byrequests
          - name: restart service
            ansible.builtin.service:
              name: apache2
              state: restarted
        when: "'frontend' in group_names"

      - name: '[DB] Install configure mysql database'
        block:
          - name: 'install docker and docker-compose'
            ansible.builtin.apt:
              name:
                - docker.io
                - docker-compose
              state: present
              update_cache: yes
          - name: 'render and copy docker-compose file to root destination'
            ansible.builtin.template:
              src: docker-compose.j2
              dest: "/tmp/docker-compose.yml"
          - name: 'copy db init files'
            ansible.builtin.copy:
              src: "{{ app.src }}db" 
              dest: "/tmp/"
          - name: 'install mysql database'
            community.docker.docker_compose:
              project_src: /tmp/
              files: docker-compose.yml
              build: yes
              state: present
          - name: clean up
            ansible.builtin.file:
              path: /tmp/docker-compose.yml
              state: absent
          - ansible.builtin.file:
              path: /tmp/db/init.sql
              state: absent
        when: "'db' in group_names"

      - name: '[BACKEND] Install configure backends'
        block:
        - name: 'create user'
          ansible.builtin.user:
            name: "{{ app.owner }}"
            comment: "app user"
            state: present
        - name: 'install python3 and pip'
          ansible.builtin.apt:
            name:
              - python3
              - python3-pip
            state: present
            update_cache: yes
        - name: 'copy app files to backends'
          ansible.posix.synchronize:
            dest: "{{ app.dest }}"
            src: "{{ app.src }}"
        - name: 'render and copy app enviroment variables to backend destinations'
          ansible.builtin.template:
            src: app_env.j2
            dest: "{{ app.dest }}.env"
        - name: 'install virtualenv'
          ansible.builtin.pip:
            name: virtualenv
            state: present
        - name: 'install specified python requirements in indicated (virtualenv)'
          ansible.builtin.pip:
            requirements: "{{ app.dest }}requirements.txt"
            virtualenv: "{{ app.dest }}.venv"
        - name: 'take ownership of backend files'
          ansible.builtin.file:
            dest: "{{ app.dest }}" 
            owner: "{{ app.owner }}"
            group: "{{ app.owner }}"
            mode: 0744
            recurse: yes
        - name: 'render and copy systemd service file for app02'
          ansible.builtin.template:
            src: systemd_gunicorn_app.j2
            dest: /etc/systemd/system/gunicorn.service
            owner: root
            group: root
            mode: 0644
        - name: ensure service is running
          ansible.builtin.service:
            name: gunicorn
            state: restarted
            enabled: yes
        when: "'backend' in group_names"
- name: modify base.html of first backend server
  hosts: backend[0]
  become: true
  gather_facts: no
  vars:
    app:
      dest: /opt/fastapi/
  tasks:
    - ansible.builtin.replace:
        path: "{{ app.dest }}templates/base.html"
        regexp: 'bg-dark'
        replace: 'bg-secondary'